#this file will generate mesh and fill blocks in memory cell
#okay so memory might in 1 vertex bank, 1 face bank but it will be grouped in 4x4 cubic chunks and a color palyte cell
#vertices on edges will be duplicated.
#cubic chunks will be located in the coordinate system:
#    y
#    |__x
#   /
#  z
#chunk will be refered to with 3 numbers 2D example:
# -1  1   0  1   1  1
# -1  0   0  0   1  0
# -1 -1   0 -1   1 -1
#so we get that kind of system of processors
#               -->                            ->                           ->                                ->
# (1) generator --> (n) vertex banks(grouped)  -> (n) projection processors -> projection_banks               -> (n)graphic_processors
#               -->                            ->                           -> (n)face_tables(grouped)        ->
#               --> (n) face_banks ---------------------------------------------------------------------------->
# and also game processor which connects to variable cell and to every processor to stop them
# bacically we get n individual renderers working on data we distribute with generator and a crossfeed of data at projection_banks
# since projection_banks take relatively low amount of memory we can have for every graphic processor memory group subdivided to projection processor groups.
# this might be a bad idea in projection processors memory is not distributed evenly but it's easy to distribute
#
# after thinking on that scheme for a while, I think simplification could be made.
# face bank1 and vertex banks could be joined together since vertex optimisation seems to not be possible without hash tables
# each of the projection processors will have acceess to all face banks and will read them in "stripes" meaning it will offset by a specific amount and read
# every nth face based on amount of projectors.
# if more than one display is in use face tables are still an option
# also multiple numbers could be joined together since decoding them takes almost as many operations as looking them up individualy but will decrease amount of
# memory banks by 5 times. In face banks coordinates are relative to the chunk
#
# the height map for terrain will be discribed by this formula:
# h = floor(2.123*(cos(x/6.13) + cos(y)/6.57) + 0.5 * (sin(x) + sin(y*0.781)))
# it's quite tough on operations (14) but hopefully will provide some interesting results

define data bank10

define chunk_offset_adresses 17
define chunk_health_flags 98
define graphic_processors_n 8

jump setupped setup == 1
    data[chunk_health_flags] = 0
    setup = 1
:setupped
# a simple code to generate chunks just for starting:
chunk_health = data[chunk_health_flags]

chunk_id = 0

mesh_data_id = 0
getlink mesh_data mesh_data_id
:data_loop

    vert_id = 0
    :vertical_loop
        jump chunk_healthy (chunk_health >> chunk_id) % 2 == 1 
            
            chunk_offset_adress = chunk_offset_adresses + chunk_id * 3
            
            chunk_offset_x = data[chunk_offset_adress]
            chunk_offset_y = data[chunk_offset_adress + 1]
            chunk_offset_z = data[chunk_offset_adress + 2]
            
            mesh_data_adress = 170 * vert_id
        
            y = 0
            :y_loop
            
                x = 0
                :x_loop
                    x_abs = x + chunk_offset_x
                    y_abs = y + chunk_offset_z
                    elevation = floor(2.123*(cos(x_abs*9.3515) + cos(y_abs*55)/6.57) + 0.5 * (sin(x_abs*57) + sin(y_abs*44.77)))
                    elevation = elevation - chunk_offset_y
                    
                    x_p_1 = x + 1
                    y_p_1 = y + 1
                    
                    mesh_data[mesh_data_adress] = x + elevation << 3 + y << 6 + x_p_1 << 9 + elevation << 12 + y << 15 + x_p_1 << 18 + elevation << 21 + y_p_1 << 24 + x << 27 + elevation << 30 + y_p_1 << 33 + 1 << 36
                    
                    jump in_bounds (elevation >> 2) == 0
                        mesh_data[mesh_data_adress] = 0
                    :in_bounds
                    
                    mesh_data_adress = mesh_data_adress + 1
                    
                    x = x + 1
                jump x_loop x < 4
                
                y = y + 1
            jump y_loop y < 4
            
            cleaning_var = 0
            :cleaning_loop
                mesh_data[mesh_data_adress + cleaning_var] = 0
                cleaning_var = cleaning_var + 1
            jump cleaning_loop cleaning_var < graphic_processors_n
            
            chunk_health = chunk_health + 1 << chunk_id
        
        :chunk_healthy
        chunk_id = chunk_id + 1
        
        vert_id = vert_id + 1
    jump vertical_loop vert_id < 3
    
    mesh_data_id = mesh_data_id + 1
    getlink mesh_data mesh_data_id
jump data_loop mesh_data_id < 9

data[chunk_health_flags] = chunk_health

wait 30

end

